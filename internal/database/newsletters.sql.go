// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: newsletters.sql

package database

import (
	"context"
	"time"
)

const deleteNewsLetter = `-- name: DeleteNewsLetter :exec

DELETE FROM newsletters WHERE email = $1
`

//
func (q *Queries) DeleteNewsLetter(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteNewsLetter, email)
	return err
}

const getNewsLetter = `-- name: GetNewsLetter :one

SELECT id, email, updated_at, created_at FROM newsletters WHERE email = $1
`

//
func (q *Queries) GetNewsLetter(ctx context.Context, email string) (Newsletter, error) {
	row := q.db.QueryRowContext(ctx, getNewsLetter, email)
	var i Newsletter
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const storeNewsLetter = `-- name: StoreNewsLetter :one
INSERT INTO newsletters (created_at, updated_at, email)
VALUES ($1,$2,$3)
RETURNING id, email, updated_at, created_at
`

type StoreNewsLetterParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Email     string
}

func (q *Queries) StoreNewsLetter(ctx context.Context, arg StoreNewsLetterParams) (Newsletter, error) {
	row := q.db.QueryRowContext(ctx, storeNewsLetter, arg.CreatedAt, arg.UpdatedAt, arg.Email)
	var i Newsletter
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
