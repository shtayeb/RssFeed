// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sessions.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id,user_id,ip_address,user_agent,payload,expires_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, user_id, ip_address, user_agent, payload, expires_at
`

type CreateSessionParams struct {
	ID        uuid.UUID
	UserID    int32
	IpAddress sql.NullString
	UserAgent sql.NullString
	Payload   sql.NullString
	ExpiresAt sql.NullTime
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Payload,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Payload,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, ip_address, user_agent, payload, expires_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Payload,
		&i.ExpiresAt,
	)
	return i, err
}
